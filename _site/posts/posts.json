[
  {
    "path": "posts/2021-06-25-happy-git/",
    "title": "happy git",
    "description": "how to collaborate via git and github",
    "author": [
      {
        "name": "Jenny Richmond",
        "url": {}
      }
    ],
    "date": "2021-06-25",
    "categories": [],
    "contents": "\nwhy git?\nUsing git and github to collaborate on code and writing is common in research teams that are trying to work reproducibly. Github is really good at version control and allows different people to work on the same project at the same time while avoiding the accumulation of duplicate versions of things that people on the team are too scared to delete.\n\n\n\nBut… collaborating via github is not like google docs, where you and your collaborators are making changes on a document in real time. Because everyone will be working independently and every so often “pushing” your changes to github, there is the potential for your changes to conflict. To avoid this happening, follow the golden rule of git:\n\nAlways “pull” before you “push”\n\nhow to git\nAs you are learning git, you might like to use the git tab within RStudio (Option A), but as you become more familiar with the process you might find it faster to type commands in the terminal (Option B).\n\n\n\nOption A git for beginners\nusing the git tab\nStep 1: git pull\nWhen you are working on a repo with someone else, it is possible that your collaborator has pushed their changes to your repo since the last time you were working. Whenever you sit down to work on your project/site, it is good practice to “pull” before you “push”.\n\n\n\nIt is a good idea to use git pull before you think about pushing new content, because by getting the latest version of the repo from git onto your local machine you are much less likely to create merge conflicts (aka clashes with your collaborators).\nStep 2-4: git add - commit - push\nWhen you have made some changes and want to push those changes to git, just knit your documents and then tell github that you have some content to add.\nFirst press the commit button.\n\n\n\nIn the popup window…\nadd: check the box next to each of the files you are ready to commit. This “stages” the files ready for the commit.\ncommit: on the right side of a the popup window, write a message explaining to your collaborators (or your future self) what changes have been made in this commit 3. click the commit button. Close out the popup box.\npush: press the “up” button to push your changes to github\n\n\n\nCheck your github repo to make sure that your changes have appeared.\nOption B git for experts\nusing the terminal\nOnce you get a bit more familiar with the process of pulling, committing and pushing your changes to github, you might like to speed up the process by typing commands into the terminal.\nFirst, does your RStudio have a Terminal tab? If not, choose Tools-Terminal-New Terminal to get one.\n\n\n\nStep 1: git pull\nYou want to pull the most up-to-date version of your project from git. Type…\n\ngit pull\n\n… into the terminal. If you already have the most recent version, it will let you know that you are Already up to date.\n\n\n\nStep 2: git add\nThen let github know which files you want to add. Type…\n\ngit add .\n\n… into the terminal. This one won’t give you any feedback. This says hey git, I want to add some stuff, in fact all things that have changed (aka .) This is the same as “staging” all the files that have changed.\n\n\n\nStep 3: git commit\nCommit your files with a message that lets your collaborators (or your future self) know what has changed. Type…\n\ngit commit -m “a message that makes sense”\n\n… into the terminal. This one will give you a list of files that have been changed as feedback.\n\n\n\nStep 4: git push\nAnd finally, push your changes to github. Type…\n\ngit push\n\n… into the terminal. Wait for it to chug and complete the push.\n\n\n\nCheck your github repo to make sure that your changes have appeared.\nWatch Jenny do Option A and B in this youtube video\nNeed help?\nJenny Bryan who works for R-Studio has written a great site called happygitwithr which has lots of good tips and tricks if you are looking for more.\n\n\n\n",
    "preview": "posts/2021-06-25-happy-git/final.png",
    "last_modified": "2021-06-25T13:59:57+10:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-05-example-reproducibility-plan/",
    "title": "plan example",
    "description": "this is an example of what your reproducibility plan should look like",
    "author": [
      {
        "name": "Jenny Richmond",
        "url": {}
      }
    ],
    "date": "2021-03-05",
    "categories": [],
    "contents": "\nThe paper we are planning to reproduce is…\nHill, S. E., Prokosch, M. L., DelPriore, D. J., Griskevicius, V., & Kramer, A. (2016). Low childhood socioeconomic status promotes eating in the absence of energy need. Psychological Science, 27, 354–364.\nThe data is available to download from this OSF repo.\n\nNOTE: JennyS might use this data as an example in Q&A sessions, you can download the csv file here.\n\n\nNOTE: If you would like to download this .Rmd file to use as a template, you can download it here\n\nPlan\nThere are 3 studies reported in this paper. For each study, the goal is to reproduce the …\ndemographic descriptives (reported in Participants)\nfigures (column graphs reporting total calories as a function of SES and energy need/condition/glucose)\ntables of descriptive statistics (M, SD, Range)\nDemographics\nFor each study the authors report…\nhow many students participated\nmean, SD, range age\nStudy 1\nThe goal is to reproduce the demographic descriptives in the Participants section here.\n\n\n\nStudy 2\nThe goal is to reproduce the demographic descriptives in the Participants section here.\n\n\n\nStudy 3\nThe goal is to reproduce the demographic descriptives in the Participants section here.\n\n\n\nFigures\nStudy 1\nThe goal is to reproduce this column graph.\n\n\n\nStudy 2\nThe goal is to reproduce this column graph.\n\n\n\nStudy 3\nThe goal is to reproduce this column graph.\n\n\n\nTables\nStudy 1\nThe goal is to reproduce the values and formatting in this table.\n\n\n\nStudy 2\nThe goal is to reproduce the values and formatting in this table.\n\n\n\nStudy 3\nThe goal is to reproduce the values and formatting in this table.\n\n\n\nFirst steps\nTo get started we need to…\ndownload the csv for each study from OSF\nlocate a codebook (if there is one) to work out which variables contain demographic information\nwork out how to count participants by gender/condition and calculate the mean, SD, and range of ages in each sample\n\n\n\n",
    "preview": "posts/2021-03-05-example-reproducibility-plan/img/study1_demo.png",
    "last_modified": "2021-03-05T10:52:17+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-13-learning-log-example/",
    "title": "learning log example",
    "description": "This week I have been playing with tables",
    "author": [
      {
        "name": "Jenny Richmond",
        "url": {}
      }
    ],
    "date": "2021-02-13",
    "categories": [],
    "contents": "\nThis post is an example of the kind of log that you should post to RPubs each week. The learning log is an opportunity to reflect on what you have learned each week and to think about what the next steps in your coding journey are. It should answer the following questions…\nWhat were your coding goals this week?\nHow did you go achieving your goals (challenges/successes)?\nWhat the next steps are in your coding journey?\n… include examples of plots/code that you have been working on.\nJenny’s learning log I\n\n\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(gt)\nlibrary(DT)\n\n\n\nThis week the Tidy Tuesday dataset is about income disparities in the US. The student debt dataset looks particularly interesting.\n\n\ndebt <- read_csv(\"debt.csv\")\n\nglimpse(debt)\n\n\nRows: 30\nColumns: 4\n$ year          <dbl> 2016, 2016, 2016, 2013, 2013, 2013, 2010, 201…\n$ race          <chr> \"White\", \"Black\", \"Hispanic\", \"White\", \"Black…\n$ loan_debt     <dbl> 11108.410, 14224.770, 7493.999, 8363.605, 103…\n$ loan_debt_pct <dbl> 0.3367511, 0.4183588, 0.2189689, 0.2845555, 0…\n\nLooks like year is numeric, make it a factor so that it works better in the plot.\n\n\ndebt$year <- as_factor(debt$year)\n\n\n\nLooks like this df average family student loan debt for aged 25-55, by race and year normalized to 2016 dollars. Lets plot debt over time by race.\n\n\ndebt %>%\n  ggplot(aes(x = year, y = loan_debt, colour = race, group = race)) +\n  geom_point() +\n  geom_line() +\n  theme_classic() +\n  scale_y_continuous(limits = c(0,15000)) +\n  labs(title = \"Average family student loan debt by race and year\", \n       y = \"Loan debt ($2016)\", \n       x = \"Year\")\n\n\n\n\nThe goal\nOK plotting is great, but I am trying to learn about tables this week. My goal is to practice making tables, so lets start by averaging this data into something that might be table worthy.\nThis chunk groups the debt data by year (averaging across race) and summarising the mean debt levels.\n\n\nsummary <- debt %>%\n  group_by(year) %>%\n  summarise(meandebt = mean(loan_debt))\n\nsummary\n\n\n# A tibble: 10 x 2\n   year  meandebt\n * <fct>    <dbl>\n 1 1989     1053.\n 2 1992     1014.\n 3 1995     1735.\n 4 1998     1959.\n 5 2001     2311.\n 6 2004     3225.\n 7 2007     4793.\n 8 2010     6880.\n 9 2013     7281.\n10 2016    10942.\n\nI know that there are several packages that are useful for making tables in R. My goal is to try them out and work out what the pros/cons are\nkableExtra\ngt\nDT\nOption 1 kableExtra\nPipe your dataframe into the kbl() function and you get a basic html table. Add kable styling to get a bootstrap theme.\n\n\nsummary %>%\n  kbl()\n\n\n\nyear\n\n\nmeandebt\n\n\n1989\n\n\n1052.853\n\n\n1992\n\n\n1013.949\n\n\n1995\n\n\n1735.111\n\n\n1998\n\n\n1959.001\n\n\n2001\n\n\n2311.100\n\n\n2004\n\n\n3224.881\n\n\n2007\n\n\n4793.357\n\n\n2010\n\n\n6880.418\n\n\n2013\n\n\n7281.225\n\n\n2016\n\n\n10942.393\n\n\n\n\nsummary %>%\n  kbl() %>%\n  kable_styling()\n\n\n\nyear\n\n\nmeandebt\n\n\n1989\n\n\n1052.853\n\n\n1992\n\n\n1013.949\n\n\n1995\n\n\n1735.111\n\n\n1998\n\n\n1959.001\n\n\n2001\n\n\n2311.100\n\n\n2004\n\n\n3224.881\n\n\n2007\n\n\n4793.357\n\n\n2010\n\n\n6880.418\n\n\n2013\n\n\n7281.225\n\n\n2016\n\n\n10942.393\n\n\nIt is weird that in each of these options, when I run the Rmd chunk it doesn’t display the contents of the table. I just get a white box. But… when I knit the document, they render just fine. Not sure what is going on with that. I also don’t really know what kable_styling() does; the only difference in the knitting document is that it appears centred on the page. There must be more to it….\nOption 2 gt\nThe gt package makes great tables (apparently).\n\n\nsummary %>%\n  gt()\n\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#wzcnlopbrl .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wzcnlopbrl .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wzcnlopbrl .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wzcnlopbrl .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wzcnlopbrl .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wzcnlopbrl .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wzcnlopbrl .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wzcnlopbrl .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wzcnlopbrl .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wzcnlopbrl .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wzcnlopbrl .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wzcnlopbrl .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wzcnlopbrl .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#wzcnlopbrl .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wzcnlopbrl .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wzcnlopbrl .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wzcnlopbrl .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#wzcnlopbrl .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wzcnlopbrl .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#wzcnlopbrl .gt_left {\n  text-align: left;\n}\n\n#wzcnlopbrl .gt_center {\n  text-align: center;\n}\n\n#wzcnlopbrl .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wzcnlopbrl .gt_font_normal {\n  font-weight: normal;\n}\n\n#wzcnlopbrl .gt_font_bold {\n  font-weight: bold;\n}\n\n#wzcnlopbrl .gt_font_italic {\n  font-style: italic;\n}\n\n#wzcnlopbrl .gt_super {\n  font-size: 65%;\n}\n\n#wzcnlopbrl .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nyear\n      meandebt\n    1989\n      1052.853\n    1992\n      1013.949\n    1995\n      1735.111\n    1998\n      1959.001\n    2001\n      2311.100\n    2004\n      3224.881\n    2007\n      4793.357\n    2010\n      6880.418\n    2013\n      7281.225\n    2016\n      10942.393\n    \n\noooo that is…. minimalistic. It appears when I run the chunk and only takes up the necessary space. It is perhaps a little skinny though…\nOption 3 DT\nThe DT package is an interface for the javascript DataTables library.\n\n\nsummary %>%\n  DT::datatable()\n\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"1989\",\"1992\",\"1995\",\"1998\",\"2001\",\"2004\",\"2007\",\"2010\",\"2013\",\"2016\"],[1052.85253333333,1013.9488,1735.111,1959.00133333333,2311.1,3224.88066666667,4793.35733333333,6880.41833333333,7281.225,10942.393]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>meandebt<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nOK that one seems nice. I don’t love the default font (huh the font that displays in the Rmd is different to how it renders… why is that?). Its not too big (or too skinny) though and the search function could be useful if you were dealing with big tables. The decimal places are a bit of a problem though.\nChallenges/Successes\nI got the data summary to display as a table using 3 different packages (yay!), but each one as its own problems that I will need to dig into a little more. I like the kableExtra one (except it is annoying that it won’t display when I run the chunk). I like gt(), but I need to work out how to make it take up a little more room on the page. DT() is also nice, but it would be good if it would deal with those decimal places a bit more consistently.\nNext steps\nSo far I have piped my data into the main table making function for each of these packages and ended up with the default settings. Next I need to look at the documentation a little more closely and work out whether there are arguments I can use to “style” the kableExtra table, customise the width of the gt() one, and fix the decimal places and font in the DT() table.\n\n\n\n",
    "preview": "posts/2021-02-13-learning-log-example/learning-log-example_files/figure-html5/plot-1.png",
    "last_modified": "2021-02-13T15:22:12+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-30-intro-babynames/",
    "title": "babynames post",
    "description": "play with baby names data",
    "author": [
      {
        "name": "Jenny Richmond",
        "url": {}
      }
    ],
    "date": "2021-01-06",
    "categories": [],
    "contents": "\ndata viz with ggplot\nload packages\nWe can use the library() function to load the packages we need. The tidyverse package contains tons of useful functions for data wrangling and visualisation (including ggplot). The ozbabynames package contains data from birth records in Australia.\n\n\nlibrary(tidyverse)\nlibrary(ozbabynames)\n\n\n\nread the babynames data\n\n\nozbabynames <- ozbabynames\n\nglimpse(ozbabynames)\n\n\nRows: 252,358\nColumns: 5\n$ name  <chr> \"Charlotte\", \"Olivia\", \"Ava\", \"Amelia\", \"Mia\", \"Isla\"…\n$ sex   <chr> \"Female\", \"Female\", \"Female\", \"Female\", \"Female\", \"Fe…\n$ year  <int> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ count <int> 577, 550, 464, 442, 418, 392, 378, 353, 351, 339, 334…\n$ state <chr> \"New South Wales\", \"New South Wales\", \"New South Wale…\n\ndefine the names you want to compare\nbtw Lady Gaga’s real name is Stefani\n\n\nartist_names <- c(\"Billie\", \"Taylor\", \"Stefani\")\n\n\n\nwhose name is most popular??\n\n\nozbabynames %>%\n  filter(name %in% artist_names) %>%\n  group_by(name, year) %>% \n  summarise(count = sum(count)) %>%\n  ggplot(aes(x = year, \n             y = count,\n             colour = name)) +\n  geom_line() +\n  theme_bw() +\n facet_wrap(~name,\n             scales = \"free_y\") +\n  theme(legend.position = \"none\") +\n  labs(title = \"artist names plot with free_y\")\n\n\n\n\nWhat does the scales = \"free y\" do? What happens if you delete it? Is the plot more meaningful with “free y” or without it?\n\n\nozbabynames %>%\n  filter(name %in% artist_names) %>%\n  group_by(name, year) %>% \n  summarise(count = sum(count)) %>%\n  ggplot(aes(x = year, \n             y = count,\n             colour = name)) +\n  geom_line() +\n  theme_bw() +\n facet_wrap(~name) +\n  theme(legend.position = \"none\") +\n  labs(title = \"artist names plot without free_y\")\n\n\n\n\nRecreate the plot above with your names\n\n\nyour_names <- c(\"Jenny\", \"Kate\", \"Danielle\")\n\n\n\nWhat do you need to change about the code below to make it plot your names?\n\n\nozbabynames %>%\n  filter(name %in% your_names) %>%\n  group_by(name, year) %>% \n  summarise(count = sum(count)) %>%\n  ggplot(aes(x = year, \n             y = count,\n             colour = name)) +\n  geom_line() +\n  theme_bw() +\n facet_wrap(~name,\n             scales = \"free_y\") +\n  theme(legend.position = \"none\") +\n  labs(title = \"our names plot with free_y\")\n\n\n\n\nDo you need scales = \"free_y\"?\n\n\nozbabynames %>%\n  filter(name %in% your_names) %>%\n  group_by(name, year) %>% \n  summarise(count = sum(count)) %>%\n  ggplot(aes(x = year, \n             y = count,\n             colour = name)) +\n  geom_line() +\n  theme_bw() +\n facet_wrap(~name) +\n  theme(legend.position = \"none\") +\n    labs(title = \"our names plot without free_y\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2020-11-30-intro-babynames/intro_babynames_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-01-07T12:11:55+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-01-06-no-numbers/",
    "title": "what do you mean no numbers?",
    "description": {},
    "author": [
      {
        "name": "Jenny Richmond",
        "url": {}
      }
    ],
    "date": "2021-01-06",
    "categories": [],
    "contents": "\nIn this course, there are no lectures, no tutorials, no exam, and no numbers. Woah, woah, woah you say… I get the no lectures, no tutorials, no exam, but what do you mean no numbers??\nI mean that you will get more feedback in this course than you have received in your entire university career thus far, but we are not going to put a mark on anything.\n\n\nWhy? Richard Buckland has some inspiring ideas about this.\n\n“I think marks are a bit like sugar, if you add it to things people eat it. But if you take away the sugar, what’s going to make people eat things?” Richard Buckland\n\nRichard Buckland talks about when there are no marks, students are motivated by different things. Students like….\nthings that are interesting\nthings that are fun\nthings that are pleasurable\nthings that foster curiosity\nthe joy of learning\nhelping each other\nbeing part of a community\ncreating things\nsolving problems\ndoing puzzles\ncompetition\nchallenging themselves\ncollaborative learning\nThe internship is designed to tap into lots of the motivators on Richard’s list and to give you a go at the kinds of activities that researchers consider part of their job (thinking, writing, reflecting, presenting). By engaging in these activities, we want you to develop skills that will be relevant to you as an honours student and in your postgraduate career.\nResponding to feedback and striving to improve our performance is a big part of being a psychologist and you will receive detailed feedback on every piece of written work that you submit. But research has shown that feedback does not necessary promote learning, unless there is an opportunity to integrate that feedback to improve a piece of work. In this course, you will have the opportunity to write like academics do.\n\nHow writing works in the real world: Write a draft, get feedback, revise, submit, get feedback, revise, resubmit, get more feedback, revise again, resubmit again etc etc.\n\nGiven that you will have the opportunity to revise your work to improve it, marks are irrelevant in this course as we go along. Detailed (and critical) feedback will be given on each piece of writing, but numeric grades will not be released until final revisions are marked prior to exams.\nBut how do I know how I’m going?\nDon’t worry. You will always know where you are and what you need to do to improve. The feedback will highlights both the strengths and weaknesses of your work and will be detailed enough that you will be able to judge the quality of your performance; we are just not going put a number or letter grade on it.\nTry and let go of the grade-driven mindset, for this course at least, and embrace feedback as an opportunity to develop your academic skills.\n\n\n\n",
    "preview": "posts/2021-01-06-no-numbers/richard.png",
    "last_modified": "2021-02-13T11:07:38+11:00",
    "input_file": {}
  }
]
